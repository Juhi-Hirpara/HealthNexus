//package org.example.healthnexus1.service;
//
//import org.example.healthnexus1.dto.PaymentRequest;
//import org.example.healthnexus1.entity.PaymentHistory;
//import org.example.healthnexus1.repository.PaymentHistoryRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//
//@Service
//public class PaymentService {
//
//    @Autowired
//    private PaymentHistoryRepository paymentHistoryRepository;
//
//    public PaymentHistory createPayment(PaymentRequest paymentRequest) {
//        PaymentHistory payment = new PaymentHistory();
//
//        payment.setUserId(paymentRequest.getUserId());
//        payment.setProviderId(paymentRequest.getProviderId());
//        payment.setAppointmentId(paymentRequest.getAppointmentId());
//        payment.setAmount(paymentRequest.getAmount());
//        payment.setPaymentMethod(paymentRequest.getPaymentMethod());
//        payment.setStatus("PENDING"); // Initially pending
//        // created_at will be automatically generated by DB
//
//        return paymentHistoryRepository.save(payment);
//    }
//
//    public PaymentHistory updatePaymentStatus(Integer paymentId, String status) {
//        PaymentHistory payment = paymentHistoryRepository.findById(paymentId)
//                .orElseThrow(() -> new RuntimeException("Payment not found"));
//        payment.setStatus(status);
//        return paymentHistoryRepository.save(payment);
//    }
//}
package org.example.healthnexus1.service;

import com.stripe.Stripe;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;
import org.example.healthnexus1.dto.PaymentRequest;
import org.example.healthnexus1.entity.Appointment;
import org.example.healthnexus1.entity.PaymentHistory;
import org.example.healthnexus1.entity.Provider;
import org.example.healthnexus1.entity.User;
import org.example.healthnexus1.repository.AppointmentRepository;
import org.example.healthnexus1.repository.PaymentHistoryRepository;
import org.example.healthnexus1.repository.ProviderRepository;
import org.example.healthnexus1.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
public class PaymentService {

    @Autowired
    private PaymentHistoryRepository paymentHistoryRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ProviderRepository providerRepository;

    @Autowired
    private AppointmentRepository appointmentRepository;

    public PaymentHistory createPayment(PaymentRequest paymentRequest) {
        PaymentHistory payment = new PaymentHistory();

        // Fetch related entities from DB
        User user = userRepository.findById(paymentRequest.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        payment.setUser(user);

        Provider provider = providerRepository.findById(paymentRequest.getProviderId())
                .orElseThrow(() -> new RuntimeException("Provider not found"));
        payment.setProvider(provider);

        Appointment appointment = appointmentRepository.findById(paymentRequest.getAppointmentId())
                .orElseThrow(() -> new RuntimeException("Appointment not found"));
        payment.setAppointment(appointment);

        try {
            // Create PaymentIntent with Stripe
            PaymentIntentCreateParams params = PaymentIntentCreateParams.builder()
                    .setAmount(paymentRequest.getAmount().multiply(new BigDecimal(100)).longValue()) // amount in cents
                    .setCurrency("usd") // or "inr" depending on your business
                    .setPaymentMethod(paymentRequest.getPaymentMethodId()) // âœ… Use PaymentMethodId from request
                    .setConfirm(true) // Confirm immediately
                    .build();

            PaymentIntent paymentIntent = PaymentIntent.create(params);

            // Set payment details after successful Stripe payment
            payment.setAmount(paymentRequest.getAmount());
            payment.setPaymentMethod(paymentRequest.getPaymentMethodId());
            payment.setStatus(PaymentHistory.PaymentStatus.COMPLETED); // mark as completed after success

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Stripe payment failed: " + e.getMessage());
        }

        // created_at will be set automatically by @PrePersist
        return paymentHistoryRepository.save(payment);
    }

    public PaymentHistory updatePaymentStatus(Integer paymentId, String status) {
        PaymentHistory payment = paymentHistoryRepository.findById(paymentId)
                .orElseThrow(() -> new RuntimeException("Payment not found"));
        payment.setStatus(PaymentHistory.PaymentStatus.valueOf(status));
        return paymentHistoryRepository.save(payment);
    }
}
